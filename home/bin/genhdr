#!/usr/bin/env ruby
require 'set'

body = []

while l = STDIN.gets
  case l.strip
  when ''
  when /^#define/
  when /^#include </
  when /^using /
  when /^typedef /
  when 'int ri() {', 'double rd() {', 'long rl() {'
    nil while (l = STDIN.gets) and l.strip != '}'
    redo if (l = STDIN.gets).strip.empty?
    break
  else
    body << l.chomp
    break
  end
end

idents = ['ri', 'rd', 'rl', 'long', 'rb_tree_tag']
idents_use = Set.new

defines = {
  'REP' => '#define REP(i, n) FOR(i, 0, n)',
  'REP1' => '#define REP1(i, n) for (remove_cv<remove_reference<decltype(n)>::type>::type i = 1; i <= (n); i++)',
  'FOR' => '#define FOR(i, a, b) for (remove_cv<remove_reference<decltype(b)>::type>::type i = (a); i < (b); i++)',
  'PER1' => '#define PER1(i, n) for (remove_cv<remove_reference<decltype(n)>::type>::type i = (n); i > 0; i--)',
  'ROF' => '#define ROF(i, a, b) for (remove_cv<remove_reference<decltype(b)>::type>::type i = (b); --i >= (a); )',
  'SIZE' => '#define SIZE(x) (sizeof(x)/sizeof(*x))',
  'ALL' => '#define ALL(x) (x).begin(), (x).end()',
  'eb' => '#define eb emplace_back',
  'pb' => '#define pb push_back',
  'mp' => '#define mp make_pair',
  'fi' => '#define fi first',
  'se' => '#define se second',
  'smax' => '#define smax(x,y) ((x) = max(x, y))',
  'smin' => '#define smin(x,y) ((x) = min(x, y))',
}
defines['long'] = '#define long long long' if ARGV.size > 0
defines_use = Set.new

typedefs = {
  'cd' => 'typedef complex<double> cd;',
  'vi' => 'typedef vector<int> vi;',
  'pdd' => 'typedef pair<double, double> pdd;',
  'pii' => 'typedef pair<int, int> pii;',
  'pil' => 'typedef pair<int, long> pil;',
  'pli' => 'typedef pair<long, int> pli;',
  'pll' => 'typedef pair<long, long> pll;',
  'tiii' => 'typedef tuple<int, int, int> tiii;',
  'tlll' => 'typedef tuple<long, long, long> tlll;',
  'ulong' => 'typedef unsigned long ulong;',
  'vpii' => 'typedef vector<pair<int, int> > vpii;',
}
typedefs_use = Set.new

headers = {
  'algorithm' => ['count','count_if','find','iota','max','min','sort','unique','lower_bound','max_element','min_element','upper_bound','fill_n','fill','copy','copy_n','next_permutation','nth_element','random_shuffle','reverse','transform'],
  'bitset' => ['bitset'],
  'cassert' => ['assert'],
  'cfloat' => ['DBL_MAX'],
  'chrono' => ['chrono'],
  'climits' => ['INT_MAX', 'INT_MIN', 'LONG_MAX', 'LONG_MIN', 'LLONG_MAX', 'LLONG_MIN'],
  'cmath' => ['asin','atan2','ceil','exp','fabs','floor','hypot','pow','round','sin','sqrt'],
  'complex' => ['complex'],
  'cstdint' => ['int64_t','uint64_t'],
  'cstdio' => ['printf','puts','scanf','gets'],
  'cctype' => ['isdigit','isalpha','isalnum'],
  'cstdlib' => ['abs','atoi','atof','malloc','rand'],
  'cstring' => ['strchr', 'strlen','strstr', 'strcpy', 'memcpy', 'memcmp', 'memset', 'strcmp'],
  'ctime' => ['time'],
  'deque' => ['deque'],
  'functional' => ['bind','bit_xor','hash','less','negate','greater'],
  'iostream' => ['cout','cin'],
  'iomanip' => ['setfill','setprecision','setw'],
  'iterator' => ['back_inserter','front_inserter','inserter','ostream_iterator'],
  'list' => ['list'],
  'map' => ['map','multimap'],
  'memory' => ['make_unique','unique_ptr'],
  'numeric' => ['accumulate','gcd','inner_product','iota','partial_sum'],
  'pthread.h' => ['pthread_create'],
  'queue' => ['queue', 'priority_queue'],
  'set' => ['set','multiset'],
  'sstream' => ['stringstream'],
  'stack' => ['stack'],
  'string' => ['string'],
  'random' => ['minstd_rand', 'random_device'],
  'thread' => ['thread'],
  'unordered_map' => ['unordered_map','unordered_multimap'],
  'unordered_set' => ['unordered_set','unordered_multiset'],
  'utility' => ['pair','fi','se','first','pii','pll','swap'],
  'tuple' => ['tuple','tiii','tlll','tie'],
  'type_traits' => ['remove_cv','remove_reference'],
  'vector' => ['vector'],
}
headers_r = {}
for k, vs in headers
  for v in vs
    headers_r[v] = k
  end
end
headers_use = Set.new

### Scan

out = []

body << l.chomp while l = STDIN.gets
words = body.map {|l| l.scan /[\w\.]+/ }.flatten.to_set
loop do
  size = idents_use.size + typedefs_use.size + defines_use.size + headers_use.size
  idents_use |= words & idents
  typedefs_use |= words & typedefs.keys
  defines_use |= words & defines.keys
  headers_use |= headers_r.values_at(*(words & headers_r.keys))
  break if idents_use.size + typedefs_use.size + defines_use.size + headers_use.size == size
  words |= (typedefs.values_at(*typedefs_use) | defines.values_at(*defines_use)).map {|l| l.scan /\w+/ }.flatten
end

### Output

# int64_t
#if idents_use.member?('long') || idents_use.member?('pli') || idents_use.member?('pil')
if idents_use.member?('PRId64') || idents_use.member?('SCNd64')
  out << '#define __STDC_FORMAT_MACROS'
  headers_use << 'inttypes.h'
end

# headers
## dependencies
if idents_use.member? 'ri' or idents_use.member? 'rd' or idents_use.member? 'rl'
  headers_use << 'cstdio'
end

def is_c_header h
  h.start_with?('c') && !['complex', 'chrono'].member?(h)
end

c_header = nil
if headers_use.all? {|x| is_c_header x}
  c_header = true
  headers_use.map! {|x| is_c_header(x) ? x[1..-1]+'.h' : x}
end

for x in headers_use.to_a.sort
  out << "#include <#{x}>"
end
out << 'using namespace std;' unless c_header or headers_use.empty?
out << 'using namespace std::placeholders;' if idents_use.member? '_1'

if idents_use.member? 'rb_tree_tag'
  out << '#include <ext/pb_ds/assoc_container.hpp>'
  out << '#include <ext/pb_ds/tree_policy.hpp>'
  out << 'using namespace __gnu_pbds;'
end

# typedefs & defines
out << '' if ! out.empty? and (! defines_use.empty? or ! typedefs_use.empty?)
for x in defines_use.to_a.sort
  out << defines[x]
end
for x in typedefs_use.to_a.sort
  out << typedefs[x]
end

# functions
out << '' if ! out.empty? && ! idents.empty?

if idents_use.member? 'ri'
  out.push << "int ri() {
  int m = 0, s = 0, c;
  while ((c = getchar())-'0' >= 10u) m = c == '-';
  for (; c < 10u; c = getchar()) s = s*10+c-'0';
  return m ? -s : s;
}
"
end

if idents_use.member? 'rl'
  out.push << %{long rl() {
  long x;
  scanf(#{idents_use.member?('PRId64') ? '"%" SCNd64' : ARGV.empty? ? '"%ld"' : '"%lld"'}, &x);
  return x;
}
}
end

if idents_use.member? 'read'
  out.push << %{template <class T>
char read(T &s) {
  int m = 0, c;
  s = 0;
  while ((c = getchar())-'0' >= 10u) m = c == '-';
  for (; c-'0' < 10u; c = getchar()) s = s*10+c-'0';
  if (m) s = -s;
  return c;
}
}
end

if idents_use.member? 'rd'
  out.push << 'double rd() {
  double x;
  scanf("%lf", &x);
  return x;
}
'
end

for x in out
  print x, "\n"
end
for x in body
  print x, "\n"
end
