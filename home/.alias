# vim: set ft=sh fdm=marker:

GNU=
[[ -f /etc/lsb-release ]] && GNU=1
if [[ -n $GNU ]]; then
  alias ls=$'ls -XF --group-directories-first --color=auto --time-style="+\e[33m[\e[32m%Y-%m-%d \e[35m%k:%M\e[33m]\e[m"'
else
  alias ls="ls -F"
fi

md() {
  mkdir -p "$1"
  cd "$1"
}

LOCAL=$HOME/.local

# core {{{1
alias sudo='sudo ' # zsh: next word is elligible for alias expansion
alias bm=bmake
alias L=less
alias d='dirs -v'
alias l="eza -l"
alias la='l -A'
alias le=eza
alias lh='l -lh'
alias mk=make
alias ni=ninja
alias o=xdg-open
alias pa=parallel
alias pg='pgrep --full --list-full'
alias pk='pgrep --full'
alias psg='ps aux|grep --color=auto'
alias tail='tail -n $((${LINES:-`tput lines 4>/dev/null||echo -n 12`} - 3))'
alias which='which -a'

## with common options
alias cp='cp -iv'
alias df='df -Th'
if [[ -n $GNU ]]; then
  alias rm='rm -v --one-file-system' # -d since coreutils-8.19, `rm -rf` is evil
else
  alias rm='rm -v'
fi
alias dmesg='dmesg -H || dmesg | less'
alias du='du -h'
alias fd='fd --hidden --no-ignore'
alias free='free -m'
alias head='head -n $((${LINES:-`tput lines 4>/dev/null||echo -n 12`} - 3))'
alias mv='mv -iv'

# zsh specific {{{1
if [[ -n $ZSH_VERSION ]]; then
  alias -g E="|sed"
  alias -g L="|less"
  alias -g P="|column -t"
  alias -g S="|sort"
  alias -g X="|xargs"
  alias -g G='|grep -E --color=auto'
  alias -g EG='|& grep -E --color=auto'
  alias -g H="|head -n $(($LINES-2))"
  alias -g T="|tail -n $(($LINES-2))"
  alias -g N='>/dev/null'
  alias -g NN='>/dev/null 2>&1'
  alias -g X='| xargs'
  alias -g X0='| xargs -0'
  alias -g B='|sed '\''s/\x1B\[[0-9;]*[JKmsu]//g'\'

  # Dir {{{2
  #a2# Execute \kbd{ls -lSrah}
  alias dir="command ls -lSrah"
  #a2# Only show dot-directories
  alias lad='command ls -d .*(/)'
  #a2# Only show dot-files
  alias lsa='command ls -a .*(.)'
  #a2# Only files with setgid/setuid/sticky flag
  alias lss='command ls -l *(s,S,t)'
  #a2# Only show symlinks
  alias lsl='command ls -l *(@)'
  #a2# Display only executables
  alias lsx='command ls -l *(*)'
  #a2# Display world-{readable,writable,executable} files
  alias lsw='command ls -ld *(R,W,X.^ND/)'
  #a2# Display the ten biggest files
  alias lsbig="command ls -flh *(.OL[1,10])"
  #a2# Only show directories
  alias lsd='command ls -d *(/)'
  #a2# Only show empty directories
  alias lse='command ls -d *(/^F)'
  #a2# Display the ten newest files
  alias lsnew="command ls -rtlh *(D.om[1,10])"
  #a2# Display the ten oldest files
  alias lsold="command ls -rtlh *(D.Om[1,10])"
  #a2# Display the ten smallest files
  alias lssmall="command ls -Srl *(.oL[1,10])"
  #a2# Display the ten newest directories and ten newest .directories
  alias lsnewdir="command ls -rthdl *(/om[1,10]) .*(D/om[1,10])"
  #a2# Display the ten oldest directories and ten oldest .directories
  alias lsolddir="command ls -rthdl *(/Om[1,10]) .*(D/Om[1,10])"

  # Path aliases {{{2
  hash -d d=~/Documents
  hash -d t=~/tmp
fi


# dev {{{1
alias gdb='gdb -q'
alias agdb='gdb -ix ~/.gdb/gdbinit.algo'
alias ggdb='gdb -ix ~/.gdb/gdbinit.gef'
alias pgdb='gdb -ix ~/.gdb/gdbinit.pwndbg'

alias cl=clang++

# applications {{{1
alias cifs='sudo mount -t cifs //10.0.0.3/c /mnt -o iocharset=utf8,user=Administrator,pass=,uid=1000,gid=1000,users --verbose'
alias clip='xclip -i -selection clipboard'
alias dhc='sudo dhcpcd -x wlp3s0; sudo dhcpcd wlp3s0 -C /lib/dhcpcd/dhcpcd-hooks/20-resolv.conf'
alias drsync='rsync --progress --partial --delete --size-only'
alias mtr='sudo mtr --curses'
alias px='proxychains -f ~/.config/proxychains0.conf'
alias px1='proxychains -f ~/.config/proxychains1.conf'
alias py=python
alias py3=python3
alias qq='wine ~/.wine/drive_c/Program\ Files/QQ/Bin/QQ.exe'
alias rb=ruby
alias se=sudoedit
alias vimmin='vi -u NONE --cmd "set nocp | sy on | filetype plugin indent on"' # install aur/neovim-git && ln -sf nvim /usr/bin/vi
alias wee=weechat-curses
alias xi='xinit -- -nolisten tcp -ardelay 170 -arinterval 40 :0 vt$XDG_VTNR'
alias xst='xstow -d ~/.local/stow'

alias e="nvr --servername=$XDG_RUNTIME_DIR/nvim.pipe --remote"
alias vs="nvr --servername=$XDG_RUNTIME_DIR/nvim.pipe --remote -O"
alias t="nvr --servername=$XDG_RUNTIME_DIR/nvim.pipe --remote-tab"

## with common options
alias dstat='dstat -dnmcl --socket --top-io -N enp4s0f2,wlp3s0'
alias rsync='rsync --progress --partial'
alias luit='luit -encoding gbk'
alias wine='WINEDEBUG=-all wine' # turn debugging messages off

# zsh
if [[ -n $ZSH_VERSION ]]; then
  alias -g NF=".*(oc[1])"
  alias -g ND="/*(oc[1])"
  alias -g N='>/dev/null'
  alias -g NN='2>/dev/null'
fi

alias du1='du --max-depth 1 | sort -rh | head'
alias adate='for i in Asia/{Shanghai,Tokyo} Europe/{Berlin,London} US/{Eastern,Pacific}; do printf %-22s "$i ";TZ=:$i date +"%F %a %T %Z";done'
alias port='sudo netstat -ntlp'
alias 2pdf='libreoffice --headless --convert-to pdf' # unoconv -f pdf
alias 2csv='libreoffice --headless --convert-to csv'
alias g2u='iconv -f GBK -t UTF-8'
alias u2g='iconv -f UTF-8 -t GBK'
alias pwget='proxychains wget'
alias vnc='vncviewer -QualityLevel=0 -CompressLevel=3 -PreferredEncoding=ZRLE -FullScreen=1 -Shared=1'
alias spice='spicec -h 0 -p 5900'
alias matlabc='~/.local/opt/matlab/bin/matlab -nodisplay -r clc'
alias mtp='simple-mtpfs /media'

# git {{{1
alias ga='git add'
alias gau='git add -u'
alias gcam='git commit -am'
alias pgcl='px git clone'
alias gb='git branch'
alias gc='git commit'
alias gcl='git clone'
alias gcm='git commit -m'
alias gco='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gdn='git diff --name-only'
alias gg='git grep'
alias ggl='git grep --files-with-matches'
alias gl='git l'
alias glf='git l --follow'
alias glp='git l -p'
alias gpl='git pull'
alias gpu='git push'
alias grs='git restore'
alias gs='git switch'
alias gst='git status'
alias ghost='command gs'
alias grt='[[ ! -z `git rev-parse --show-cdup` ]] && cd `git rev-parse --show-cdup` || pwd'

# systemd {{{1
alias sy='sudo systemctl'
alias syu='systemctl --user'
alias status='sudo systemctl status'
alias start='sudo systemctl start'
alias restart='sudo systemctl restart'
alias reload='sudo systemctl reload'
alias stop='sudo systemctl stop'
#alias enable='sudo systemctl enable' # zsh: Failed to issue method call: No such file or directory
#alias disable='sudo systemctl disable'

alias cal='cal -3'

# package management {{{1
## Arch Linux {{{2
alias pD='sudo pacman -D'
alias yS='yay -S'
alias ySs='yay -Ss'
alias ySyu='yay -Syua --noconfirm'
alias pSy='sudo pacman -Sy'
alias pSyu='sudo pacman -Syu --noconfirm' # Synchronize with repositories and then upgrade packages that are out of date on the local system.
alias pS='sudo pacman -S'                 # Install specific package(s) from the repositories
alias pU='sudo pacman -U'                 # Install specific package not from the repositories but from a file
alias pR='sudo pacman -R'                 # Remove the specified package(s), retaining its configuration(s) and required dependencies
alias pRns='sudo pacman -Rns'             # Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pSi='pacman -Si'                    # Display information about a given package in the repositories
alias pSs='pacman -Ss'                    # Search for package(s) in the repositories
alias pQi='pacman -Qi'                    # Display information about a given package in the local database
alias pQs='pacman -Qs'                    # Search for package(s) in the local database
alias paclo="pacman -Qdt"                 # List all packages which are orphaned
alias pacc="sudo pacman -Scc"             # Clean cache - delete all not currently installed package files
alias pQl="pacman -Ql"                    # List all files installed by a given package
alias pQo="pacman -Qo"
alias pacexp="sudo pacman -D --asexp"     # Mark one or more installed packages as explicitly installed
alias pacimp="sudo pacman -D --asdep"     # Mark one or more installed packages as non explicitly installed

# Gentoo-specific {{{2
if [[ -n "$EPREFIX" ]]; then
  SUDO_IFNOT_PREFIX=
else
  SUDO_IFNOT_PREFIX='sudo '
fi
alias eme="${SUDO_IFNOT_PREFIX}emerge"
alias peme='sudo proxychains emerge'
alias ebuildncd="sudo FEATURES='-collision-detect -protected-owned' ebuild"
alias ei='eix -uI --only-names'
alias eiu='FORMAT="<installedversions:I>" I="<category>/<name>-<version>[<use>]\n" eix'
alias disp='sudo dispatch-conf'

# binary {{{1
alias off='LC_ALL=C grep --color=auto -Pabo'
alias lt=ltrace
alias ob='objdump -w -M intel'
alias re='readelf -W'
alias st=strace
alias sst='sudo strace'
alias strings='strings -a -tx' # CVE-2014-8485

# functions {{{1

web() {
  #twistd web --path "$1" -p "${2:-8000}"
  ruby -run -e httpd "$1" -p "${2:-8000}"
}

info2() { info --subnodes -o - "$1" | less; }
johnrar() { rar2john "$1" > /tmp/_.john && john --wordlist=~/Information/Dict/dict.txt /tmp/_.john; }
lst() { r2 -q "$1" -c "s $2; pd 10"; }
uniinfo() { python -c "import unicodedata as u; print u.name(unichr("$1"))"; }
udevinfo() { udevadm info -a -p $(udevadm info -q path -n $1); }
if [[ -n $ZSH_VERSION ]]; then
  eval '+w() { chmod +w "$@" }'
  eval '+x() { chmod +x "$@" }'
fi
c() { cd "$1" && ls -a; }

ssht() { ssh -t "$1" "tmux new -As $2"; }

fweb() {
  local f=/tmp/$UID.Chrome.History
  install -m 600 ~/.config/google-chrome/Default/History "$f"
  sqlite3 "$f" 'select title, url from urls order by last_visit_time desc' | fzf --multi | sed -r 's#.*(https?://)#\1#' | xargs xdg-open
  rm -f "$f"
}

y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [[ -n "$cwd" ]] && [[ "$cwd" != "$PWD" ]]; then
    builtin cd -- "$cwd"
  fi
  'rm' -f -- "$tmp"
}

#############################################################
##### https://github.com/junegunn/dotfiles/blob/master/bashrc

fzf-down() {
  fzf --height 50% "$@" --border
}

# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    fzf-down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --header "Press CTRL-S to toggle sort" \
      --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                 xargs -I % sh -c 'git show --color=always % | head -200 '" \
      --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
              xargs -I % sh -c 'vim fugitive://\$(git rev-parse --show-toplevel)/.git//% < /dev/tty'"
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local file
  file=$(fzf-tmux --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  IFS=$'\n' read -d '' -r -a out < <(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
  key=${out[0]}
  file=${out[1]}
  if [ -n "$file" ]; then
    if [ "$key" = ctrl-o ]; then
      xdg-open "$file"
    else
      ${EDITOR:-vim} "$file"
    fi
  fi
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# GIT heart FZF
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gbl() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gtag() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -200'
}

ghash() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

res() {
  old=$(stty -g)
  stty raw -echo min 0 time 5

  printf '\0337\033[r\033[999;999H\033[6n\0338' > /dev/tty
  IFS='[;R' read -r _ rows cols _ < /dev/tty

  stty "$old"

  # echo "cols:$cols"
  # echo "rows:$rows"
  stty cols "$cols" rows "$rows"
}
